#! /usr/bin/env ruby

ROOT = File.expand_path('../../', __FILE__)
$:.unshift File.join(ROOT, "lib")

require 'optparse'
require 'event'
require 'bunny'

rabbit_conn_options = {}
exchange_options    = {}
options             = {}
OptionParser.new do |opts|
  opts.banner = "Usage: gen_events [options]"

  opts.on('--host [HOST]', String, 'RabbitMQ host') do |h|
    rabbit_conn_options[:host] = h
  end

  opts.on('--vhost [VHOST]', String, 'RabbitMQ vhost') do |vhost|
    rabbit_conn_options[:vhost] = vhost
  end

  opts.on('-u', '--user [USER]', String, 'RabbitMQ user') do |user|
    rabbit_conn_options[:user] = user
  end

  opts.on('--password [PASSWORD]', String, 'RabbitMQ password') do |pw|
    rabbit_conn_options[:password] = pw
  end

  opts.on('--port [PORT]', OptionParser::DecimalInteger , 'RabbitMQ port') do |p|
    rabbit_conn_options[:port] = p
  end

  opts.on('-k', '--key [ROUTING KEY]', String, 'RabbitMQ routing key') do |k|
    exchange_options[:key] = k
  end

  opts.on('--exchange [EXCHANGE]', String, 'RabbitMQ exchange to publish to') do |ex|
    exchange_options[:name] = ex
  end

  opts.on('-c', '--count [COUNT]', OptionParser::DecimalInteger, 'Number of Events to publish') do |count|
    options[:count] = count
  end

  opts.on('--no-publish', 'Do not publish to rabbitmq') do
    options[:publish] = false
  end

  opts.on('--random-dates', 'Use random timestamp for generated events') do
    options[:dates] = :random
  end

end.parse!

dates   = options.fetch(:dates, :today)
publish = options.fetch(:publish, true)

if publish
  conn = Bunny.new rabbit_conn_options
  conn.start

  ch   = conn.create_channel
  name = exchange_options.fetch(:name, 'epic')
  key  = exchange_options.fetch(:key,  'epic.test.event')
  x    = Bunny::Exchange.new(ch, :topic, name)

  options.fetch(:count, 1).times do
    x.publish Event.generate(dates), routing_key: key
  end

  conn.close
else
  options.fetch(:count, 1).times do
    puts Event.generate(dates)
  end
end

